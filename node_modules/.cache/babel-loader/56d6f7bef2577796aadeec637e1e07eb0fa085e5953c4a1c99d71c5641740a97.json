{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless.\nimport { APIResource } from 'openai/resource';\nimport { isRequestOptions } from 'openai/core';\nimport * as AssistantsAPI from 'openai/resources/beta/assistants/assistants';\nimport * as FilesAPI from 'openai/resources/beta/assistants/files';\nimport { CursorPage } from 'openai/pagination';\nexport class Assistants extends APIResource {\n  constructor() {\n    super(...arguments);\n    this.files = new FilesAPI.Files(this._client);\n  }\n  /**\n   * Create an assistant with a model and instructions.\n   */\n  create(body, options) {\n    return this._client.post('/assistants', {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Retrieves an assistant.\n   */\n  retrieve(assistantId, options) {\n    return this._client.get(`/assistants/${assistantId}`, {\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Modifies an assistant.\n   */\n  update(assistantId, body, options) {\n    return this._client.post(`/assistants/${assistantId}`, {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        ...options?.headers\n      }\n    });\n  }\n  list(query = {}, options) {\n    if (isRequestOptions(query)) {\n      return this.list({}, query);\n    }\n    return this._client.getAPIList('/assistants', AssistantsPage, {\n      query,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Delete an assistant.\n   */\n  del(assistantId, options) {\n    return this._client.delete(`/assistants/${assistantId}`, {\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        ...options?.headers\n      }\n    });\n  }\n}\nexport class AssistantsPage extends CursorPage {}\n(function (Assistants) {\n  Assistants.AssistantsPage = AssistantsAPI.AssistantsPage;\n  Assistants.Files = FilesAPI.Files;\n  Assistants.AssistantFilesPage = FilesAPI.AssistantFilesPage;\n})(Assistants || (Assistants = {}));","map":{"version":3,"names":["APIResource","isRequestOptions","AssistantsAPI","FilesAPI","CursorPage","Assistants","constructor","files","Files","_client","create","body","options","post","headers","retrieve","assistantId","get","update","list","query","getAPIList","AssistantsPage","del","delete","AssistantFilesPage"],"sources":["C:\\Users\\vkdld\\OneDrive\\바탕 화면\\opensource2\\newsproject\\node_modules\\openai\\src\\resources\\beta\\assistants\\assistants.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../../../core\";\nimport { APIResource } from \"../../../resource\";\nimport { isRequestOptions } from \"../../../core\";\nimport * as AssistantsAPI from \"./assistants\";\nimport * as Shared from \"../../shared\";\nimport * as FilesAPI from \"./files\";\nimport { CursorPage, type CursorPageParams } from \"../../../pagination\";\n\nexport class Assistants extends APIResource {\n  files: FilesAPI.Files = new FilesAPI.Files(this._client);\n\n  /**\n   * Create an assistant with a model and instructions.\n   */\n  create(body: AssistantCreateParams, options?: Core.RequestOptions): Core.APIPromise<Assistant> {\n    return this._client.post('/assistants', {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Retrieves an assistant.\n   */\n  retrieve(assistantId: string, options?: Core.RequestOptions): Core.APIPromise<Assistant> {\n    return this._client.get(`/assistants/${assistantId}`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Modifies an assistant.\n   */\n  update(\n    assistantId: string,\n    body: AssistantUpdateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<Assistant> {\n    return this._client.post(`/assistants/${assistantId}`, {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Returns a list of assistants.\n   */\n  list(\n    query?: AssistantListParams,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<AssistantsPage, Assistant>;\n  list(options?: Core.RequestOptions): Core.PagePromise<AssistantsPage, Assistant>;\n  list(\n    query: AssistantListParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<AssistantsPage, Assistant> {\n    if (isRequestOptions(query)) {\n      return this.list({}, query);\n    }\n    return this._client.getAPIList('/assistants', AssistantsPage, {\n      query,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Delete an assistant.\n   */\n  del(assistantId: string, options?: Core.RequestOptions): Core.APIPromise<AssistantDeleted> {\n    return this._client.delete(`/assistants/${assistantId}`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n}\n\nexport class AssistantsPage extends CursorPage<Assistant> {}\n\n/**\n * Represents an `assistant` that can call the model and use tools.\n */\nexport interface Assistant {\n  /**\n   * The identifier, which can be referenced in API endpoints.\n   */\n  id: string;\n\n  /**\n   * The Unix timestamp (in seconds) for when the assistant was created.\n   */\n  created_at: number;\n\n  /**\n   * The description of the assistant. The maximum length is 512 characters.\n   */\n  description: string | null;\n\n  /**\n   * A list of [file](https://platform.openai.com/docs/api-reference/files) IDs\n   * attached to this assistant. There can be a maximum of 20 files attached to the\n   * assistant. Files are ordered by their creation date in ascending order.\n   */\n  file_ids: Array<string>;\n\n  /**\n   * The system instructions that the assistant uses. The maximum length is 32768\n   * characters.\n   */\n  instructions: string | null;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata: unknown | null;\n\n  /**\n   * ID of the model to use. You can use the\n   * [List models](https://platform.openai.com/docs/api-reference/models/list) API to\n   * see all of your available models, or see our\n   * [Model overview](https://platform.openai.com/docs/models/overview) for\n   * descriptions of them.\n   */\n  model: string;\n\n  /**\n   * The name of the assistant. The maximum length is 256 characters.\n   */\n  name: string | null;\n\n  /**\n   * The object type, which is always `assistant`.\n   */\n  object: 'assistant';\n\n  /**\n   * A list of tool enabled on the assistant. There can be a maximum of 128 tools per\n   * assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.\n   */\n  tools: Array<Assistant.CodeInterpreter | Assistant.Retrieval | Assistant.Function>;\n}\n\nexport namespace Assistant {\n  export interface CodeInterpreter {\n    /**\n     * The type of tool being defined: `code_interpreter`\n     */\n    type: 'code_interpreter';\n  }\n\n  export interface Retrieval {\n    /**\n     * The type of tool being defined: `retrieval`\n     */\n    type: 'retrieval';\n  }\n\n  export interface Function {\n    function: Shared.FunctionDefinition;\n\n    /**\n     * The type of tool being defined: `function`\n     */\n    type: 'function';\n  }\n}\n\nexport interface AssistantDeleted {\n  id: string;\n\n  deleted: boolean;\n\n  object: 'assistant.deleted';\n}\n\nexport interface AssistantCreateParams {\n  /**\n   * ID of the model to use. You can use the\n   * [List models](https://platform.openai.com/docs/api-reference/models/list) API to\n   * see all of your available models, or see our\n   * [Model overview](https://platform.openai.com/docs/models/overview) for\n   * descriptions of them.\n   */\n  model: string;\n\n  /**\n   * The description of the assistant. The maximum length is 512 characters.\n   */\n  description?: string | null;\n\n  /**\n   * A list of [file](https://platform.openai.com/docs/api-reference/files) IDs\n   * attached to this assistant. There can be a maximum of 20 files attached to the\n   * assistant. Files are ordered by their creation date in ascending order.\n   */\n  file_ids?: Array<string>;\n\n  /**\n   * The system instructions that the assistant uses. The maximum length is 32768\n   * characters.\n   */\n  instructions?: string | null;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata?: unknown | null;\n\n  /**\n   * The name of the assistant. The maximum length is 256 characters.\n   */\n  name?: string | null;\n\n  /**\n   * A list of tool enabled on the assistant. There can be a maximum of 128 tools per\n   * assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.\n   */\n  tools?: Array<\n    | AssistantCreateParams.AssistantToolsCode\n    | AssistantCreateParams.AssistantToolsRetrieval\n    | AssistantCreateParams.AssistantToolsFunction\n  >;\n}\n\nexport namespace AssistantCreateParams {\n  export interface AssistantToolsCode {\n    /**\n     * The type of tool being defined: `code_interpreter`\n     */\n    type: 'code_interpreter';\n  }\n\n  export interface AssistantToolsRetrieval {\n    /**\n     * The type of tool being defined: `retrieval`\n     */\n    type: 'retrieval';\n  }\n\n  export interface AssistantToolsFunction {\n    function: Shared.FunctionDefinition;\n\n    /**\n     * The type of tool being defined: `function`\n     */\n    type: 'function';\n  }\n}\n\nexport interface AssistantUpdateParams {\n  /**\n   * The description of the assistant. The maximum length is 512 characters.\n   */\n  description?: string | null;\n\n  /**\n   * A list of [File](https://platform.openai.com/docs/api-reference/files) IDs\n   * attached to this assistant. There can be a maximum of 20 files attached to the\n   * assistant. Files are ordered by their creation date in ascending order. If a\n   * file was previosuly attached to the list but does not show up in the list, it\n   * will be deleted from the assistant.\n   */\n  file_ids?: Array<string>;\n\n  /**\n   * The system instructions that the assistant uses. The maximum length is 32768\n   * characters.\n   */\n  instructions?: string | null;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata?: unknown | null;\n\n  /**\n   * ID of the model to use. You can use the\n   * [List models](https://platform.openai.com/docs/api-reference/models/list) API to\n   * see all of your available models, or see our\n   * [Model overview](https://platform.openai.com/docs/models/overview) for\n   * descriptions of them.\n   */\n  model?: string;\n\n  /**\n   * The name of the assistant. The maximum length is 256 characters.\n   */\n  name?: string | null;\n\n  /**\n   * A list of tool enabled on the assistant. There can be a maximum of 128 tools per\n   * assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.\n   */\n  tools?: Array<\n    | AssistantUpdateParams.AssistantToolsCode\n    | AssistantUpdateParams.AssistantToolsRetrieval\n    | AssistantUpdateParams.AssistantToolsFunction\n  >;\n}\n\nexport namespace AssistantUpdateParams {\n  export interface AssistantToolsCode {\n    /**\n     * The type of tool being defined: `code_interpreter`\n     */\n    type: 'code_interpreter';\n  }\n\n  export interface AssistantToolsRetrieval {\n    /**\n     * The type of tool being defined: `retrieval`\n     */\n    type: 'retrieval';\n  }\n\n  export interface AssistantToolsFunction {\n    function: Shared.FunctionDefinition;\n\n    /**\n     * The type of tool being defined: `function`\n     */\n    type: 'function';\n  }\n}\n\nexport interface AssistantListParams extends CursorPageParams {\n  /**\n   * A cursor for use in pagination. `before` is an object ID that defines your place\n   * in the list. For instance, if you make a list request and receive 100 objects,\n   * ending with obj_foo, your subsequent call can include before=obj_foo in order to\n   * fetch the previous page of the list.\n   */\n  before?: string;\n\n  /**\n   * Sort order by the `created_at` timestamp of the objects. `asc` for ascending\n   * order and `desc` for descending order.\n   */\n  order?: 'asc' | 'desc';\n}\n\nexport namespace Assistants {\n  export import Assistant = AssistantsAPI.Assistant;\n  export import AssistantDeleted = AssistantsAPI.AssistantDeleted;\n  export import AssistantsPage = AssistantsAPI.AssistantsPage;\n  export import AssistantCreateParams = AssistantsAPI.AssistantCreateParams;\n  export import AssistantUpdateParams = AssistantsAPI.AssistantUpdateParams;\n  export import AssistantListParams = AssistantsAPI.AssistantListParams;\n  export import Files = FilesAPI.Files;\n  export import AssistantFile = FilesAPI.AssistantFile;\n  export import FileDeleteResponse = FilesAPI.FileDeleteResponse;\n  export import AssistantFilesPage = FilesAPI.AssistantFilesPage;\n  export import FileCreateParams = FilesAPI.FileCreateParams;\n  export import FileListParams = FilesAPI.FileListParams;\n}\n"],"mappings":"AAAA;SAGSA,WAAW,QAAQ,iBAAiB;SACpCC,gBAAgB,QAAQ,aAAa;OACvC,KAAKC,aAAa,MAAM,6CAA6C;OAErE,KAAKC,QAAQ,MAAM,wCAAwC;SACzDC,UAAU,QAA+B,mBAAmB;AAErE,OAAM,MAAOC,UAAW,SAAQL,WAAW;EAA3CM,YAAA;;IACE,KAAAC,KAAK,GAAmB,IAAIJ,QAAQ,CAACK,KAAK,CAAC,IAAI,CAACC,OAAO,CAAC;EAqE1D;EAnEE;;;EAGAC,MAAMA,CAACC,IAA2B,EAAEC,OAA6B;IAC/D,OAAO,IAAI,CAACH,OAAO,CAACI,IAAI,CAAC,aAAa,EAAE;MACtCF,IAAI;MACJ,GAAGC,OAAO;MACVE,OAAO,EAAE;QAAE,aAAa,EAAE,eAAe;QAAE,GAAGF,OAAO,EAAEE;MAAO;KAC/D,CAAC;EACJ;EAEA;;;EAGAC,QAAQA,CAACC,WAAmB,EAAEJ,OAA6B;IACzD,OAAO,IAAI,CAACH,OAAO,CAACQ,GAAG,CAAC,eAAeD,WAAW,EAAE,EAAE;MACpD,GAAGJ,OAAO;MACVE,OAAO,EAAE;QAAE,aAAa,EAAE,eAAe;QAAE,GAAGF,OAAO,EAAEE;MAAO;KAC/D,CAAC;EACJ;EAEA;;;EAGAI,MAAMA,CACJF,WAAmB,EACnBL,IAA2B,EAC3BC,OAA6B;IAE7B,OAAO,IAAI,CAACH,OAAO,CAACI,IAAI,CAAC,eAAeG,WAAW,EAAE,EAAE;MACrDL,IAAI;MACJ,GAAGC,OAAO;MACVE,OAAO,EAAE;QAAE,aAAa,EAAE,eAAe;QAAE,GAAGF,OAAO,EAAEE;MAAO;KAC/D,CAAC;EACJ;EAUAK,IAAIA,CACFC,KAAA,GAAmD,EAAE,EACrDR,OAA6B;IAE7B,IAAIX,gBAAgB,CAACmB,KAAK,CAAC,EAAE;MAC3B,OAAO,IAAI,CAACD,IAAI,CAAC,EAAE,EAAEC,KAAK,CAAC;;IAE7B,OAAO,IAAI,CAACX,OAAO,CAACY,UAAU,CAAC,aAAa,EAAEC,cAAc,EAAE;MAC5DF,KAAK;MACL,GAAGR,OAAO;MACVE,OAAO,EAAE;QAAE,aAAa,EAAE,eAAe;QAAE,GAAGF,OAAO,EAAEE;MAAO;KAC/D,CAAC;EACJ;EAEA;;;EAGAS,GAAGA,CAACP,WAAmB,EAAEJ,OAA6B;IACpD,OAAO,IAAI,CAACH,OAAO,CAACe,MAAM,CAAC,eAAeR,WAAW,EAAE,EAAE;MACvD,GAAGJ,OAAO;MACVE,OAAO,EAAE;QAAE,aAAa,EAAE,eAAe;QAAE,GAAGF,OAAO,EAAEE;MAAO;KAC/D,CAAC;EACJ;;AAGF,OAAM,MAAOQ,cAAe,SAAQlB,UAAqB;AAiRzD,WAAiBC,UAAU;EAGXA,UAAA,CAAAiB,cAAc,GAAGpB,aAAa,CAACoB,cAAc;EAI7CjB,UAAA,CAAAG,KAAK,GAAGL,QAAQ,CAACK,KAAK;EAGtBH,UAAA,CAAAoB,kBAAkB,GAAGtB,QAAQ,CAACsB,kBAAkB;AAGhE,CAAC,EAbgBpB,UAAU,KAAVA,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}