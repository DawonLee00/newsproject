{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vkdld\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\opensource2\\\\newsproject\\\\src\\\\components\\\\pages\\\\WeatherPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { parseString } from 'xml2js';\nimport styled from 'styled-components';\nimport WeatherInfo from '../ui/WeatherInfo';\nimport ChartView from '../ui/ChartView';\nimport PriceChartModule from '../ui/PriceChartModule';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: 8px;\n`;\n_c = Wrapper;\nconst Wrapper2 = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  width: 50%;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 8px; \n`;\n_c2 = Wrapper2;\nconst UpperContainer = styled.div`\n  padding: 8px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n_c3 = UpperContainer;\nconst LogoContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-left: auto;\n  margin-right: auto;\n`;\n_c4 = LogoContainer;\nconst IconImage = styled.img`\n  padding: 8px;\n  width: ${props => props.width}%;\n  height: ${props => props.height}%;\n  cursor: pointer;\n`;\n_c5 = IconImage;\nconst LogoImage = styled.img`\n  width: 100%;\n  height: 100px;\n  margin-right: 100px;\n`;\n_c6 = LogoImage;\nconst WeahterPage = () => {\n  _s();\n  let [weatherData, setWeatherData] = useState(null);\n  let [todayDate, setTodayDate] = useState('');\n  let [thisTime, setThisTime] = useState('');\n  let [currentPosition, setCurrentPosition] = useState(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const getTodayDate = () => {\n      const date = new Date();\n      const year = date.getFullYear();\n      const month = String(date.getMonth() + 1).padStart(2, '0');\n      const day = String(date.getDate()).padStart(2, '0');\n      const todayDate = `${year}${month}${day}`;\n      const time = date.getHours();\n      setTodayDate(todayDate);\n      setThisTime(time);\n      console.log(\"시간\", time);\n    };\n    const getCurrentPosition = () => {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setCurrentPosition({\n          latitude,\n          longitude\n        });\n      }, error => {\n        console.error('Error getting current position:', error);\n      });\n    };\n    getTodayDate();\n    getCurrentPosition();\n  }, []);\n  const calculateBaseTime = () => {\n    const now = new Date();\n    let baseTime = 0;\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    // Base_time 정의\n    const baseTimes = [200, 500, 800, 1100, 1400, 1700, 2000, 2300];\n\n    // API 제공 시간(~이후) 정의\n    const apiSupplyTimes = [210, 510, 810, 1110, 1410, 1710, 2010, 2310];\n\n    // 현재 시간에서 baseTimes를 차례대로 비교하여 가장 최근의 시간을 찾음\n    for (let i = 0; i < baseTimes.length; i++) {\n      if (now.getHours() * 100 + now.getMinutes() < apiSupplyTimes[i]) {\n        baseTime = baseTimes[i - 1 >= 0 ? i - 1 : baseTimes.length - 1];\n        break;\n      }\n    }\n    return baseTime;\n  };\n  const currentBaseTime = calculateBaseTime();\n  console.log(`현재 시간에 대응하는 base_time: ${currentBaseTime}`);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`https://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getVilageFcst?serviceKey=HHvG3%2F3Mx%2BtbYNvb%2BfJhtqOdTOgqEscPhlnGIB3znKp3p%2FEhIf6N5ZziE3hRJ87zIhcgzgsB7ZjJWHW7XCO%2BsQ%3D%3D&pageNo=1&numOfRows=12&dataType=XML&base_date=${todayDate}&base_time=${currentBaseTime}&nx=55&ny=127`);\n        if (!response.ok) {\n          throw new Error(`HTTP 에러!!!!!!1!`);\n        }\n        let xmlData = await response.text();\n        parseString(xmlData, (err, result) => {\n          if (err) {\n            throw new Error('Error 파싱 XML!!!!!!!!!!!');\n          }\n          console.log('결과!!:', result.response.body[0].items[0].item);\n          setWeatherData(result);\n        });\n      } catch (error) {\n        console.error('Error fetching or parsing data:', error);\n      }\n    };\n    fetchData();\n  }, [todayDate]);\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(UpperContainer, {\n      children: [/*#__PURE__*/_jsxDEV(IconImage, {\n        width: 4,\n        height: 4,\n        src: \"/asset/arrow_back.svg\",\n        alt: \"Back\",\n        onClick: () => navigate(-1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LogoContainer, {\n        children: /*#__PURE__*/_jsxDEV(LogoImage, {\n          src: \"/asset/logo.svg\",\n          alt: \"Logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WeatherInfo, {\n      weatherData: weatherData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Wrapper2, {\n      children: /*#__PURE__*/_jsxDEV(PriceChartModule, {\n        weatherData: weatherData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n_s(WeahterPage, \"srW/JHnvQSrFU8wKatG+59PU0Tg=\", false, function () {\n  return [useNavigate];\n});\n_c7 = WeahterPage;\nexport default WeahterPage;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"Wrapper2\");\n$RefreshReg$(_c3, \"UpperContainer\");\n$RefreshReg$(_c4, \"LogoContainer\");\n$RefreshReg$(_c5, \"IconImage\");\n$RefreshReg$(_c6, \"LogoImage\");\n$RefreshReg$(_c7, \"WeahterPage\");","map":{"version":3,"names":["React","useState","useEffect","parseString","styled","WeatherInfo","ChartView","PriceChartModule","useNavigate","jsxDEV","_jsxDEV","Wrapper","div","_c","Wrapper2","_c2","UpperContainer","_c3","LogoContainer","_c4","IconImage","img","props","width","height","_c5","LogoImage","_c6","WeahterPage","_s","weatherData","setWeatherData","todayDate","setTodayDate","thisTime","setThisTime","currentPosition","setCurrentPosition","navigate","getTodayDate","date","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","time","getHours","console","log","getCurrentPosition","navigator","geolocation","position","latitude","longitude","coords","error","calculateBaseTime","now","baseTime","baseTimes","apiSupplyTimes","i","length","getMinutes","currentBaseTime","fetchData","response","fetch","ok","Error","xmlData","text","err","result","body","items","item","children","src","alt","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c7","$RefreshReg$"],"sources":["C:/Users/vkdld/OneDrive/바탕 화면/opensource2/newsproject/src/components/pages/WeatherPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { parseString } from 'xml2js';\r\nimport styled from 'styled-components';\r\nimport WeatherInfo from '../ui/WeatherInfo';\r\nimport ChartView from '../ui/ChartView';\r\nimport PriceChartModule from '../ui/PriceChartModule';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst Wrapper = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin: 8px;\r\n`;\r\n\r\nconst Wrapper2 = styled.div`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 50%;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-bottom: 8px; \r\n`;\r\n\r\nconst UpperContainer = styled.div`\r\n  padding: 8px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst LogoContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`;\r\n\r\nconst IconImage = styled.img`\r\n  padding: 8px;\r\n  width: ${(props) => props.width}%;\r\n  height: ${(props) => props.height}%;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst LogoImage = styled.img`\r\n  width: 100%;\r\n  height: 100px;\r\n  margin-right: 100px;\r\n`;\r\n\r\nconst WeahterPage = () => {\r\n  let [weatherData, setWeatherData] = useState(null);\r\n  let [todayDate, setTodayDate] = useState('');\r\n  let [thisTime, setThisTime] = useState('');\r\n  let [currentPosition, setCurrentPosition] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const getTodayDate = () => {\r\n      const date = new Date();\r\n      const year = date.getFullYear();\r\n      const month = String(date.getMonth() + 1).padStart(2, '0');\r\n      const day = String(date.getDate()).padStart(2, '0');\r\n      const todayDate = `${year}${month}${day}`;\r\n      const time = date.getHours();\r\n      setTodayDate(todayDate);\r\n      setThisTime(time);\r\n      console.log(\"시간\",time);\r\n    };\r\n\r\n    const getCurrentPosition = () => {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const { latitude, longitude } = position.coords;\r\n          setCurrentPosition({ latitude, longitude });\r\n        },\r\n        (error) => {\r\n          console.error('Error getting current position:', error);\r\n        }\r\n      );\r\n    };\r\n\r\n    getTodayDate();\r\n    getCurrentPosition();\r\n  }, []);\r\n\r\n  const calculateBaseTime = () => {\r\n    const now = new Date(); \r\n    let baseTime = 0;\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, '0');\r\n    const day = String(date.getDate()).padStart(2, '0');\r\n    // Base_time 정의\r\n    const baseTimes = [200, 500, 800, 1100, 1400, 1700, 2000, 2300];\r\n  \r\n    // API 제공 시간(~이후) 정의\r\n    const apiSupplyTimes = [210, 510, 810, 1110, 1410, 1710, 2010, 2310];\r\n  \r\n    // 현재 시간에서 baseTimes를 차례대로 비교하여 가장 최근의 시간을 찾음\r\n    for (let i = 0; i < baseTimes.length; i++) {\r\n      if (now.getHours() * 100 + now.getMinutes() < apiSupplyTimes[i]) {\r\n        baseTime = baseTimes[i - 1 >= 0 ? i - 1 : baseTimes.length - 1];\r\n        break;\r\n      }\r\n    }\r\n  \r\n    return baseTime;\r\n  }\r\n  \r\n  const currentBaseTime = calculateBaseTime();\r\n  console.log(`현재 시간에 대응하는 base_time: ${currentBaseTime}`);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          `https://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getVilageFcst?serviceKey=HHvG3%2F3Mx%2BtbYNvb%2BfJhtqOdTOgqEscPhlnGIB3znKp3p%2FEhIf6N5ZziE3hRJ87zIhcgzgsB7ZjJWHW7XCO%2BsQ%3D%3D&pageNo=1&numOfRows=12&dataType=XML&base_date=${todayDate}&base_time=${currentBaseTime}&nx=55&ny=127`\r\n        );\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP 에러!!!!!!1!`);\r\n        }\r\n\r\n        let xmlData = await response.text();\r\n\r\n        parseString(xmlData, (err, result) => {\r\n          if (err) {\r\n            throw new Error('Error 파싱 XML!!!!!!!!!!!');\r\n          }\r\n          console.log('결과!!:', result.response.body[0].items[0].item);\r\n          setWeatherData(result);\r\n        });\r\n      } catch (error) {\r\n        console.error('Error fetching or parsing data:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [todayDate]);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <UpperContainer>\r\n        <IconImage\r\n          width={4}\r\n          height={4}\r\n          src=\"/asset/arrow_back.svg\"\r\n          alt=\"Back\"\r\n          onClick={() => navigate(-1)}\r\n        />\r\n        <LogoContainer>\r\n          <LogoImage src=\"/asset/logo.svg\" alt=\"Logo\" />\r\n        </LogoContainer>\r\n      </UpperContainer>\r\n\r\n      <WeatherInfo weatherData={weatherData} />\r\n      <Wrapper2> \r\n        <PriceChartModule weatherData={weatherData}></PriceChartModule>\r\n      </Wrapper2>   \r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default WeahterPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}